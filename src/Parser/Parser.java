/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import ASTNodes.*;
import ASTTypes.*;
import Environment.*;
import Exception.*;

public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {
  ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
           {if (true) return null;}
      break;
    case LET:
    case TYPE:
    case TRUE:
    case FALSE:
    case MINUS:
    case LPAR:
    case NOT:
    case BOX:
    case NIL:
    case DEREF:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case MATCH:
    case Id:
    case Num:
      t = Let();
      jj_consume_token(TERM);
                       {if (true) return t;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Let() throws ParseException {
  Token n;
  ASTNode t, e1, e2;
  ASTType t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case LPAR:
    case NOT:
    case BOX:
    case NIL:
    case DEREF:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case MATCH:
    case Id:
    case Num:
      t = Seq();
      break;
    case LET:
       List<Bind> decls  = new ArrayList<Bind>();
      label_1:
      while (true) {
        jj_consume_token(LET);
        n = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        e1 = BA();
        jj_consume_token(SEMIC);
        decls.add(new Bind(n.image,e1));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LET:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      e2 = Seq();
                     t = new ASTLet(decls, e2);
      break;
    case TYPE:
        HashMap<String,ASTType> lbl = new  HashMap<String,ASTType>();
      label_2:
      while (true) {
        jj_consume_token(TYPE);
        n = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        t1 = Type();
        jj_consume_token(SEMIC);
        lbl.put(n.image, t1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      e2 = Seq();
                     t = new ASTTypeDef(lbl, e2);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Seq() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = SeqExp();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMIC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      op = jj_consume_token(SEMIC);
      t2 = SeqExp();
                   t1 = new ASTSeq(t1, t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SeqExp() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = BA();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      op = jj_consume_token(ASSIGN);
      t2 = BA();
                   t1 = new ASTAssign(t1, t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode BA() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = BM();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      op = jj_consume_token(OR);
      t2 = BM();
                 t1 = new ASTOr(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode BM() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Rel();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      op = jj_consume_token(AND);
      t2 = Rel();
                 t1 = new ASTAnd(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Rel() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case GE:
    case LE:
    case NEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        op = jj_consume_token(EQ);
        break;
      case GT:
        op = jj_consume_token(GT);
        break;
      case LT:
        op = jj_consume_token(LT);
        break;
      case GE:
        op = jj_consume_token(GE);
        break;
      case LE:
        op = jj_consume_token(LE);
        break;
      case NEQ:
        op = jj_consume_token(NEQ);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
              switch(op.kind) {
                case EQ:
                  t1 = new ASTEQ(t1, t2);
                  break;
                case GT:
                  t1 = new ASTGT(t1, t2);
                  break;
                case GE:
                  t1 = new ASTGTEQ(t1, t2);
                  break;
                case LT:
                  t1 = new ASTLT(t1, t2);
                  break;
                case LE:
                  t1 = new ASTLTEQ(t1, t2);
                  break;
                case NEQ:
                  t1 = new ASTDif(t1, t2);
                  break;
                default:
                    {if (true) throw new ParseException("Unknown relational operator: " + op);}
              }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                   if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Fact();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DCOLON:
    case LCOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DCOLON:
        op = jj_consume_token(DCOLON);
        break;
      case LCOLON:
        op = jj_consume_token(LCOLON);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
      if (op.kind==DCOLON) {t1 = new ASTCons(t1,t2, false); }
      else {t1 = new ASTCons(t1,t2, true); }
      break;
    default:
      jj_la1[15] = jj_gen;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case DIV:
        case LPAR:
        case DOT:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          op = jj_consume_token(STAR);
          t2 = Fact();
                               t1 = new ASTMult(t1,t2);
          break;
        case DIV:
          op = jj_consume_token(DIV);
          t2 = Fact();
                                         t1 = new ASTDiv(t1,t2);
          break;
        case DOT:
          op = jj_consume_token(DOT);
          op = jj_consume_token(Id);
                                       /* to be done field selection */ ;
          break;
        case LPAR:
          op = jj_consume_token(LPAR);
          t2 = Let();
          jj_consume_token(RPAR);
                               t1 = new ASTApp(t1,t2);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode FunB(String sid) throws ParseException {
Token n;
ASTNode t, e1;
ASTType at;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      n = jj_consume_token(Id);
      jj_consume_token(COLON);
      at = Type();
                                          e1 = FunB(n.image); t = new ASTFun(sid,e1);
      break;
    case ARROW:
      jj_consume_token(ARROW);
      jj_consume_token(LBRA);
      e1 = Let();
      jj_consume_token(RBRA);
                                     t = new ASTFun(sid,e1);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fun() throws ParseException {
Token n;
ASTNode t, e1=null, e2;
ASTType at;
    jj_consume_token(FN);
    n = jj_consume_token(Id);
    jj_consume_token(COLON);
    at = Type();
        t = new ASTFun(n.image, null); e1 = t;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      n = jj_consume_token(Id);
      jj_consume_token(COLON);
      at = Type();
                                               e2 = new ASTFun(n.image, null);
                  ((ASTFun)e1).setBody(e2); e1 = e2;
    }
    jj_consume_token(ARROW);
    jj_consume_token(LBRA);
    e2 = Let();
    jj_consume_token(RBRA);
                                                     ((ASTFun)e1).setBody(e2);
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
  Token n,m;
  ASTNode t, e1, e2;
  List<Bind> decls;
  ASTNode  body, alt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
                t = new ASTInt(Integer.parseInt(n.image));
      break;
    case TRUE:
      n = jj_consume_token(TRUE);
                 t = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case FALSE:
      n = jj_consume_token(FALSE);
                  t = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case Id:
      n = jj_consume_token(Id);
                t = new ASTId(n.image);
      break;
    case BOX:
      jj_consume_token(BOX);
      t = Fact();
                       t = new ASTBox(t);
      break;
    case DEREF:
      jj_consume_token(DEREF);
      t = Fact();
                         t = new ASTDeref(t);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t = Fact();
                         t = new ASTNeg(t);
      break;
    case NOT:
      jj_consume_token(NOT);
      t = Fact();
                        /* missing AST for not */; t = null;
      break;
    case IF:
      jj_consume_token(IF);
      t = BA();
      jj_consume_token(LBRA);
      e1 = Let();
      jj_consume_token(RBRA);
      jj_consume_token(ELSE);
      jj_consume_token(LBRA);
      e2 = Let();
      jj_consume_token(RBRA);
                                                                         t = new ASTIfThenElse(t, e1, e2 );
      break;
    case WHILE:
      jj_consume_token(WHILE);
      t = BA();
      jj_consume_token(LBRA);
      body = Let();
      jj_consume_token(RBRA);
                                                 t = new ASTWhile(t,body);
      break;
    case FN:
      t = Fun();
      break;
    case PRINT:
      jj_consume_token(PRINT);
      t = Fact();
                         t = new ASTPrint(t, false);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      t = Fact();
                           t = new ASTPrint(t, true);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t = Let();
      jj_consume_token(RPAR);
      break;
    case NIL:
      jj_consume_token(NIL);
              t = new ASTNil();
      break;
    case MATCH:
      jj_consume_token(MATCH);
      t = Let();
      jj_consume_token(LBRA);
      jj_consume_token(NIL);
      jj_consume_token(SARROW);
      e1 = Let();
      jj_consume_token(PIPE);
      n = jj_consume_token(Id);
      jj_consume_token(DCOLON);
      m = jj_consume_token(Id);
      jj_consume_token(SARROW);
      e2 = Let();
      jj_consume_token(RBRA);
        t = new ASTMatch(t,e1,n.image,m.image,e2);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTType Type() throws ParseException {
  ASTType t1, t2;
    t1 = TypeF();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SARROW:
      jj_consume_token(SARROW);
      t2 = Type();
                                         t1 = new ASTTArrow(t1,t2);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeBindList LabelList() throws ParseException {
  ASTType t;
  HashMap<String,ASTType> ll;
  Token n;
      ll = new HashMap<String,ASTType>() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      n = jj_consume_token(Id);
      jj_consume_token(COLON);
      t = Type();
                                   ll.put(n.image,t);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Id);
        jj_consume_token(COLON);
        t = Type();
                                                    ll.put(n.image,t);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
      {if (true) return new TypeBindList(ll);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTType TypeF() throws ParseException {
  ASTType t;
  TypeBindList ll;
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                  t = new ASTTInt();
      break;
    case Id:
      n = jj_consume_token(Id);
                   t = new ASTTId(n.image);
      break;
    case BOOL:
      jj_consume_token(BOOL);
                   t = new ASTTBool();
      break;
    case UNIT:
      jj_consume_token(UNIT);
                   t = new ASTTUnit();
      break;
    case STRING:
      jj_consume_token(STRING);
                     t = new ASTTString();
      break;
    case REF:
      jj_consume_token(REF);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
                                     t = new ASTTRef(t);
      break;
    case LIST:
      jj_consume_token(LIST);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
                                      t = new ASTTList(t);
      break;
    case STRUCT:
      jj_consume_token(STRUCT);
      jj_consume_token(LBRA);
      ll = LabelList();
      jj_consume_token(RBRA);
                                                    t = new ASTTStruct(ll); {if (true) return t;}
      break;
    case UNION:
      jj_consume_token(UNION);
      jj_consume_token(LBRA);
      ll = LabelList();
      jj_consume_token(RBRA);
                                                   t = new ASTTUnion(ll); {if (true) return t;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x49e1,0x20,0x40,0x49e0,0x800000,0x0,0x8000000,0x4000000,0xf0000000,0xf0000000,0xc00,0xc00,0x600000,0x87000,0x87000,0x600000,0x2000000,0x2000000,0x4980,0x0,0x2000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6009ef4,0x0,0x0,0x6009ef4,0x0,0x8,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x6009ef4,0x4000,0x0,0x2000000,0x2ff0000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
