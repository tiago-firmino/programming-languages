/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LET = 5;
  /** RegularExpression Id. */
  int TYPE = 6;
  /** RegularExpression Id. */
  int TRUE = 7;
  /** RegularExpression Id. */
  int FALSE = 8;
  /** RegularExpression Id. */
  int PIPE = 9;
  /** RegularExpression Id. */
  int PLUS = 10;
  /** RegularExpression Id. */
  int MINUS = 11;
  /** RegularExpression Id. */
  int STAR = 12;
  /** RegularExpression Id. */
  int DIV = 13;
  /** RegularExpression Id. */
  int LPAR = 14;
  /** RegularExpression Id. */
  int RPAR = 15;
  /** RegularExpression Id. */
  int LBRA = 16;
  /** RegularExpression Id. */
  int RBRA = 17;
  /** RegularExpression Id. */
  int EQUAL = 18;
  /** RegularExpression Id. */
  int DOT = 19;
  /** RegularExpression Id. */
  int COLON = 20;
  /** RegularExpression Id. */
  int DCOLON = 21;
  /** RegularExpression Id. */
  int LCOLON = 22;
  /** RegularExpression Id. */
  int SEMIC = 23;
  /** RegularExpression Id. */
  int TERM = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int AND = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int GT = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int GE = 31;
  /** RegularExpression Id. */
  int LE = 32;
  /** RegularExpression Id. */
  int NEQ = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int ASSIGN = 35;
  /** RegularExpression Id. */
  int BOX = 36;
  /** RegularExpression Id. */
  int NIL = 37;
  /** RegularExpression Id. */
  int DEREF = 38;
  /** RegularExpression Id. */
  int IF = 39;
  /** RegularExpression Id. */
  int ELSE = 40;
  /** RegularExpression Id. */
  int WHILE = 41;
  /** RegularExpression Id. */
  int PRINT = 42;
  /** RegularExpression Id. */
  int PRINTLN = 43;
  /** RegularExpression Id. */
  int FN = 44;
  /** RegularExpression Id. */
  int ARROW = 45;
  /** RegularExpression Id. */
  int SARROW = 46;
  /** RegularExpression Id. */
  int MATCH = 47;
  /** RegularExpression Id. */
  int INT = 48;
  /** RegularExpression Id. */
  int UNIT = 49;
  /** RegularExpression Id. */
  int BOOL = 50;
  /** RegularExpression Id. */
  int STRING = 51;
  /** RegularExpression Id. */
  int LIST = 52;
  /** RegularExpression Id. */
  int REF = 53;
  /** RegularExpression Id. */
  int UNION = 54;
  /** RegularExpression Id. */
  int STRUCT = 55;
  /** RegularExpression Id. */
  int String = 56;
  /** RegularExpression Id. */
  int Id = 57;
  /** RegularExpression Id. */
  int Num = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"let\"",
    "\"type\"",
    "\"true\"",
    "\"false\"",
    "\"|\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\".\"",
    "\":\"",
    "\"::\"",
    "\":?\"",
    "\";\"",
    "\";;\"",
    "\",\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"~\"",
    "\":=\"",
    "\"box\"",
    "\"nil\"",
    "\"!\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"print\"",
    "\"println\"",
    "\"fn\"",
    "\"=>\"",
    "\"->\"",
    "\"match\"",
    "\"int\"",
    "\"()\"",
    "\"bool\"",
    "\"string\"",
    "\"list\"",
    "\"ref\"",
    "\"union\"",
    "\"struct\"",
    "<String>",
    "<Id>",
    "<Num>",
  };

}
